DROP TABLE restaurants IF EXISTS CASCADE;
DROP TABLE users IF EXISTS CASCADE;
DROP TABLE user_roles IF EXISTS CASCADE;
DROP TABLE dishes IF EXISTS CASCADE;
DROP TABLE voteHistory IF EXISTS CASCADE;

DROP SEQUENCE global_seq IF EXISTS ;

CREATE SEQUENCE global_seq AS INTEGER START WITH 100000;

CREATE TABLE restaurants (
  id          INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  name        VARCHAR(255)   NOT NULL,
  votes       INTEGER
);
CREATE UNIQUE INDEX restaurants_unique_name
  ON restaurants (name);

CREATE TABLE users
(
  id                INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  name              VARCHAR(255)                 NOT NULL,
  email             VARCHAR(255)                 NOT NULL,
  password          VARCHAR(255)                 NOT NULL,
  restaurantVotedId INTEGER,
  voteMade          BOOLEAN,
  FOREIGN KEY (restaurantVotedId) REFERENCES restaurants (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX users_unique_email
  ON users (email);

CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE dishes (
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  name          VARCHAR(255)    NOT NULL,
  price         INTEGER         NOT NULL,
  restaurantId  INTEGER,
  FOREIGN KEY (restaurantId) REFERENCES restaurants (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX dishes_unique_name_restaurantId
  ON dishes (name, restaurantId);

CREATE TABLE voteHistory (
  id                INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  userId            INTEGER                      NOT NULL,
  date              DATE                         NOT NULL,
  dishName          VARCHAR(255)                 NOT NULL,
  price             INTEGER                      NOT NULL,
  restaurantName    VARCHAR(255)                 NOT NULL
);